<?php
// Constants
define('PLUGIN_NAME', 'rsync-backup-manager');
define('CONFIG_FILE', '/boot/config/plugins/' . PLUGIN_NAME . '/jobs.json');
define('CRON_FILE', '/boot/config/plugins/' . PLUGIN_NAME . '/cron.json');

// Load jobs from configuration file
function loadJobs() {
    if (!file_exists(CONFIG_FILE)) {
        return [];
    }
    
    $content = file_get_contents(CONFIG_FILE);
    if (!$content) {
        return [];
    }
    
    return json_decode($content, true) ?: [];
}

// Save jobs to configuration file
function saveJobs($jobs) {
    $configDir = dirname(CONFIG_FILE);
    if (!file_exists($configDir)) {
        mkdir($configDir, 0755, true);
    }
    
    file_put_contents(CONFIG_FILE, json_encode($jobs, JSON_PRETTY_PRINT));
}

// Get list of Unraid shares
function getUnraidShares() {
    $shares = [];
    $sharePath = '/mnt/user';
    
    if ($handle = opendir($sharePath)) {
        while (false !== ($entry = readdir($handle))) {
            if ($entry != "." && $entry != ".." && is_dir($sharePath . '/' . $entry)) {
                $shares[] = $entry;
            }
        }
        closedir($handle);
    }
    
    return $shares;
}

// Create a cron entry for a backup job
function createCronEntry($job) {
    $cronExpression = getCronExpression($job['schedule']);
    $jobScript = createJobScript($job);
    
    // Add to user crontab
    $cmd = "crontab -l 2>/dev/null | grep -v '" . $job['id'] . "' | { cat; echo '$cronExpression $jobScript'; } | crontab -";
    exec($cmd);
}

// Remove a cron entry for a backup job
function removeCronEntry($jobId) {
    $cmd = "crontab -l 2>/dev/null | grep -v '$jobId' | crontab -";
    exec($cmd);
}

// Get cron expression based on schedule type
function getCronExpression($schedule) {
    switch ($schedule['type']) {
        case 'hourly':
            return '0 * * * *';
        case 'daily':
            return '0 0 * * *';
        case 'weekly':
            return '0 0 * * 0';
        case 'monthly':
            return '0 0 1 * *';
        case 'custom':
            return $schedule['expression'];
        default:
            throw new Exception('Invalid schedule type');
    }
}

// Create the backup script for a job
function createJobScript($job) {
    $scriptDir = '/boot/config/plugins/' . PLUGIN_NAME . '/scripts';
    if (!file_exists($scriptDir)) {
        mkdir($scriptDir, 0755, true);
    }

    $scriptPath = $scriptDir . '/' . $job['id'] . '.sh';
    $rsyncCmd = buildRsyncCommand($job);
    
    $script = "#!/bin/bash\n\n";
    $script .= "# Backup script for job: {$job['name']}\n";
    $script .= "# Generated by Rsync Backup Manager\n\n";
    
    // Add logging
    $script .= "exec 1>> /var/log/rsync-backup-manager/{$job['id']}.log 2>&1\n\n";
    $script .= "echo \"[$(date)] Starting backup job: {$job['name']}\"\n\n";
    
    // Add the rsync command
    $script .= "$rsyncCmd\n\n";
    
    // Add error handling and notifications
    $script .= "if [ $? -eq 0 ]; then\n";
    $script .= "    echo \"[$(date)] Backup completed successfully\"\n";
    $script .= "    /usr/local/emhttp/plugins/dynamix/scripts/notify -e \"Rsync Backup Manager\" -s \"Backup Success\" -d \"Backup job '{$job['name']}' completed successfully\"\n";
    $script .= "else\n";
    $script .= "    echo \"[$(date)] Backup failed\"\n";
    $script .= "    /usr/local/emhttp/plugins/dynamix/scripts/notify -e \"Rsync Backup Manager\" -s \"Backup Failed\" -d \"Backup job '{$job['name']}' failed\"\n";
    $script .= "fi\n";
    
    file_put_contents($scriptPath, $script);
    chmod($scriptPath, 0755);
    
    return $scriptPath;
}

// Build the rsync command for a job
function buildRsyncCommand($job) {
    $cmd = 'rsync -avh';  // Base flags
    
    // Add bandwidth limit if enabled
    if ($job['bandwidth']['enabled']) {
        $cmd .= " --bwlimit=" . (intval($job['bandwidth']['limit']) * 1024);  // Convert MB/s to KB/s
    }
    
    // Add source path
    $source = $job['source']['type'] === 'remote' 
        ? "root@{$job['source']['host']}:{$job['source']['path']}"
        : $job['source']['path'];
    
    // Add destination path
    $dest = $job['destination']['type'] === 'remote'
        ? "root@{$job['destination']['host']}:{$job['destination']['path']}"
        : $job['destination']['path'];
    
    // Add paths to command
    $cmd .= " \"$source/\" \"$dest/\"";
    
    return $cmd;
}

// Execute an rsync job immediately
function executeRsyncJob($job) {
    $scriptPath = createJobScript($job);
    exec("nohup $scriptPath > /dev/null 2>&1 &");
}

// Ensure required directories exist
function ensureDirectories() {
    $dirs = [
        '/boot/config/plugins/' . PLUGIN_NAME,
        '/boot/config/plugins/' . PLUGIN_NAME . '/scripts',
        '/var/log/rsync-backup-manager'
    ];
    
    foreach ($dirs as $dir) {
        if (!file_exists($dir)) {
            mkdir($dir, 0755, true);
        }
    }
} 